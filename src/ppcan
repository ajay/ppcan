#!/usr/bin/python3

###############################################################################

import binascii
import curses
import functools
import json
import os
import signal
import subprocess
import sys
import tempfile
import threading
import time

import can
import caneton
import colorama

###############################################################################

canData     = {}
canDataLock = threading.Lock()
pause       = False

###############################################################################

class CanMsg:
    def __init__(self, id, data, dlc, name=None, signals=[], showSig=True):
        self.id        = id
        self.name      = name
        self.count     = 0
        self.time      = time.time()
        self.showSig   = showSig
        self.startTime = self.time

        self.update(data=data, dlc=dlc, signals=signals)

    @staticmethod
    def bytearrayToAscii(data : bytearray, sep='.') -> str:
        return ''.join([chr(b) if 32 < b < 127 else sep for b in data])

    def update(self, data, dlc, signals):
        currTime     = time.time()
        self.delta   = (currTime - self.time) * 1000 # ms
        self.time    = currTime
        self.count  += 1

        self.data    = data
        self.ascii   = self.bytearrayToAscii(self.data)
        self.dlc     = dlc
        self.signals = signals

    def hideSignals(self):
        self.showSig = False

    def showSignals(self):
        self.showSig = True

    @staticmethod
    def headerStrs() -> str:
        return (['   ID   | L |                Name                |                Data / Value                |  Ascii   |  Count  |   Time   | Delta (ms)',
                 '--------|---|------------------------------------|--------------------------------------------|----------|---------|----------|-----------'])

    @staticmethod
    def msgStrStart() -> str:
        return ' 0x'

    def __str__(self):
        dataStr = binascii.hexlify(self.data).decode().upper()
        dataStr = ' '.join(dataStr[i:i+2] for i in range(0, len(dataStr), 2))

        classStr  = ' {:6} | {:1} | {:34.34} | {:42} | {:8} | {:7} | {:8.2f} | {:8.2f}\n'.format(
            hex(self.id), self.dlc, str(self.name) if self.name else '', dataStr, self.ascii, self.count, time.time() - self.startTime, self.delta)
        classStr += '\n'.join([str(s) for s in self.signals]) + ('\n' if self.signals else '') if self.showSig else ''

        return classStr


class CanSignal:
    def __init__(self, name, value, decimalPlaces=3, unit=None, enums=None):
        self.name     = name
        self.value    = value
        self.raw      = value
        self.unit     = unit
        self.enums    = enums
        self.decimals = decimalPlaces

        if self.enums:
            self.decodeEnums()

    def decodeEnums(self):
        value = str(int(self.value))
        if value in self.enums:
            self.value = self.enums[value]

    def __str__(self):
        if   self.enums and self.value != self.raw:     valueStr = '{:<3} {}'.format(int(self.raw), self.value)
        elif isinstance(self.value, float):             valueStr = ('{:0.' + str(max(self.decimals, 0)) + 'f}').format(self.value)
        else:                                           valueStr = str(self.value)

        return ' {:6} | {:1} |   {:32.32} | {:<35.35} {:>6} |'.format('', '', self.name, valueStr, self.unit if self.unit else '')


class CanDbcJson:
    def __init__(self, dbcPath):
        self.dbcPath = dbcPath

        origCwd = os.getcwd()

        tempUtf8Dbc = tempfile.NamedTemporaryFile(mode='w+', encoding='utf-8')
        tempUtf8Dbc.write(open(self.dbcPath).read())

        tempDbcJson = tempfile.NamedTemporaryFile(mode='w+', encoding='utf-8')
        os.chdir(os.path.dirname(os.path.abspath(__file__)))
        subprocess.call(['./dbc2json', tempUtf8Dbc.name, tempDbcJson.name], stdout=open(os.devnull, 'wb'))

        os.chdir(origCwd)

        self.data = json.loads(open(tempDbcJson.name).read())

    def msgData(self, msgId : int):
        return self.data['messages'][str(msgId)]

    def signalData(self, msgId : int, signal : str):
        return self.msgData(msgId)['signals'][signal]

    def signalEnums(self, msgId : int, signal : str):
        signalData = self.signalData(msgId, signal)
        return signalData['enums'] if 'enums' in signalData else None

    def signalDecimalPlaces(self, msgId : int, signal : str):
        signalData = self.signalData(msgId, signal)
        return 3 if signalData['value_type'] == 'float' else str(signalData['factor'])[::-1].lstrip('0').find('.') if signalData['value_type'] == 'integer' else -1


class GoSequence:

    sequences = [
        ['⠁', '⠂', '⠄', '⡀', '⢀', '⠠', '⠐', '⠈'],
        ['-', '\\', '|', '/'],
        ['▖', '▘', '▝', '▗'],
        ['▁', '▂', '▃', '▄', '▅', '▆', '▇', '█', '▇', '▆', '▅', '▄', '▃', '▁'],
        ['┤', '┘', '┴', '└', '├', '┌', '┬', '┐'],
        ['◢', '◣', '◤', '◥'],
        ['◡◡', '⊙⊙', '◠◠'],
        ['▉', '▊', '▋', '▌', '▍', '▎', '▏', '▎', '▍', '▌', '▋', '▊', '▉'],
        ['◴', '◷', '◶', '◵'],
        ['◐', '◓', '◑', '◒']
    ]

    def __init__(self, interval, seqIdx=0):
        self.interval = interval # ms
        self.seqIdx   = seqIdx
        self.timer    = time.time()
        self.index    = 0

    def get(self):
        currTime = time.time()
        if ((currTime - self.timer) * 1000) > self.interval:
            self.timer = currTime
            self.index = (self.index + 1) % len(self.sequences[self.seqIdx])
        return self.getLast()

    def getLast(self):
        return self.sequences[self.seqIdx][self.index]

    def changeSequence(self):
        self.seqIdx = (self.seqIdx + 1) % len(self.sequences)
        self.index  = 0


class PcanGui:

    _title      = 'Python PCAN!'
    _headerYIdx = 2

    def __init__(self, bold=True, showSignals=True):
        self._boldAttr       = 0
        self._showSignals    = True
        self._signalsToggled = False

        if bold:
            self.toggleBold()

    def title(self)          -> str:  return self._title
    def header(self)         -> str:  return CanMsg.headerStrs()
    def headerYIdx(self)     -> int:  return self._headerYIdx
    def showSignals(self)    -> bool: return self._showSignals
    def signalsToggled(self) -> bool: return self._signalsToggled
    def boldAttr(self):               return self._boldAttr

    def toggleBold(self):
        self._boldAttr = 0 if self._boldAttr else curses.A_BOLD

    def toggleSignals(self):
        self._showSignals    = not self._showSignals
        self._signalsToggled = True

    def clearSignalsToggled(self):
        self._signalsToggled = False

###############################################################################

def receiveCan(canChannel, dbcFile):

    def canetonSignalsToObj(msgId : int, rawSignals : list, dbcJson : CanDbcJson) -> list:
        return [CanSignal(name=s['name'], value=s['value'], unit=s['unit'],
                          enums=dbcJson.signalEnums(msgId=msgId, signal=s['name']),
                          decimalPlaces=dbcJson.signalDecimalPlaces(msgId=msgId, signal=s['name'])) for s in filter(None, rawSignals)]

    bus     = can.interfaces.socketcan.SocketcanBus(channel=canChannel)
    dbcJson = CanDbcJson(dbcPath=dbcFile)

    while True:
        if pause:
            continue

        msg = bus.recv()

        try:
            decodedMsg = caneton.message_decode(message_id=msg.arbitration_id,
                                                message_length=msg.dlc,
                                                message_data=msg.data,
                                                dbc_json=dbcJson.data)
        except (caneton.exceptions.MessageNotFound, caneton.exceptions.DecodingError):
            decodedMsg = {
                'id'                : msg.arbitration_id,
                'multiplexing_mode' : None,
                'name'              : None,
                'raw_data'          : msg.data,
                'signals'           : [None]
            }

        canDataLock.acquire()

        if msg.arbitration_id not in canData:
            canData[msg.arbitration_id] = CanMsg(id=decodedMsg['id'],
                                                 data=decodedMsg['raw_data'],
                                                 dlc=msg.dlc,
                                                 name=decodedMsg['name'],
                                                 signals=canetonSignalsToObj(msgId=decodedMsg['id'], rawSignals=decodedMsg['signals'], dbcJson=dbcJson))
        else:
            canData[msg.arbitration_id].update(data=decodedMsg['raw_data'],
                                               dlc=msg.dlc,
                                               signals=canetonSignalsToObj(msgId=decodedMsg['id'], rawSignals=decodedMsg['signals'], dbcJson=dbcJson))

        canDataLock.release()

###############################################################################

def runPcanGui(stdscr, refreshRate):
    global pause

    badKeys = [-1, 0, ord('\t'), ord('\r'), ord('\n')]

    gui   = PcanGui()
    goSeq = GoSequence(interval=100)

    padHeight    = 0
    padY         = 0
    key          = 0
    clearCanData = False

    stdscr.clear()
    stdscr.refresh()

    curses.halfdelay(refreshRate // 100)

    curses.start_color()
    curses.init_pair(1, curses.COLOR_CYAN,  curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED,   curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_BLACK, curses.COLOR_WHITE)

    while (key != ord('q')):

        key = stdscr.getch()

        canDataStr = []
        canDataLock.acquire()
        for canId in sorted(canData.keys()):
            canData[canId].showSignals() if gui.showSignals() else canData[canId].hideSignals()
            canDataStr.append(str(canData[canId]))
        if clearCanData:
            canData.clear()
        canDataLock.release()
        canDataStr = ''.join(canDataStr).split('\n')

        height, width = stdscr.getmaxyx()
        padHeight = len(canDataStr) + len(gui.header())

        if clearCanData or (gui.signalsToggled() and padHeight < height):
            stdscr.clear()
            clearCanData = False
            gui.clearSignalsToggled()

        if   key == curses.KEY_RESIZE:                                               continue
        elif key == curses.KEY_DOWN:                                                 padY += 1
        elif key == curses.KEY_UP:                                                   padY -= 1
        elif key == curses.KEY_RIGHT or key == curses.KEY_NPAGE or key == ord(' '):  padY += height
        elif key == curses.KEY_LEFT  or key == curses.KEY_PPAGE:                     padY -= height
        elif key == curses.KEY_HOME:                                                 padY  = 0
        elif key == curses.KEY_END:                                                  padY  = padHeight
        elif key == ord('p'):                                                        pause = not pause
        elif key == ord('s'):                                                        gui.toggleSignals()
        elif key == ord('b'):                                                        gui.toggleBold()
        elif key == ord('c'):                                                        clearCanData = True
        elif key == ord('z'):                                                        goSeq.changeSequence()

        key  = ord('0') if key in badKeys else key
        padY = max(0, min(padHeight-height, padY))

        statusbarStr = " {} | 'q' [quit] | 'p' {:12} | 's' [{:4} signals] | 'b' [toggle bold] | 'c' [clear msgs] | {} / {} | '{}' ({})".format(
            goSeq.getLast() if pause             else goSeq.get(),
            '[resume CAN]'  if pause             else '[pause CAN]',
            'hide'          if gui.showSignals() else 'show',
            padY, padHeight,
            chr(key), key)

        stdscr.addnstr(0,        0, gui.title().ljust(width),    width, curses.color_pair(3) | gui.boldAttr())
        stdscr.addnstr(height-1, 0, statusbarStr.ljust(width-1), width, curses.color_pair(3) | gui.boldAttr())

        for i in range(gui.headerYIdx(), gui.headerYIdx() + len(gui.header())):
            stdscr.addnstr(i, 0, gui.header()[i-gui.headerYIdx()], width, curses.color_pair(0) | gui.boldAttr())

        pad = curses.newpad(padHeight, 200)
        for line in canDataStr:
            pad.addstr('{}\n'.format(line), curses.color_pair(0) | (gui.boldAttr() if line.startswith(CanMsg.msgStrStart()) else 0))
        pad.refresh(padY,0, 4,0, height-3,width-1)

        stdscr.refresh()

###############################################################################

def sigIntHandler(signal, frame):
    print('{}{}\n\nExiting {} ...\n{}'.format(colorama.Fore.BLUE, colorama.Style.BRIGHT, str(__file__), colorama.Style.RESET_ALL))
    exit(0)


def main():

    def validateRefreshRate(value):
        refreshRate = int(value)
        if refreshRate not in range(100, 25501, 100):
            raise argparse.ArgumentTypeError('{} is not a multiple of 100ms, or is outside the range 100ms-25500ms'.format(refreshRate))
        return refreshRate

    import argparse

    parser = argparse.ArgumentParser(description='Python PCAN!')
    parser.add_argument('-r', '--refresh_rate',
        type=validateRefreshRate,
        default=100,
        help=('Screen refresh rate in milliseconds, in multiples of 100ms (i.e. 100, 500, 1000, etc...). Slower refresh rates reduce cpu utilization. Possible values are 100ms-25500ms. Default is 100ms.'))

    requiredArgs = parser.add_argument_group('required arguments')
    requiredArgs.add_argument('-c', '--can_channel', help='Initialized SocketCAN CAN channel (i.e. can0, can1, vcan0, etc...)', required=True)
    requiredArgs.add_argument('-d', '--can_dbc',     help='CAN DBC file',                                                       required=True)

    args = parser.parse_args()

    signal.signal(signal.SIGINT, sigIntHandler)

    receiveCanThread = threading.Thread(target=receiveCan, daemon=True, args=(args.can_channel, args.can_dbc))
    receiveCanThread.start()

    curses.wrapper(functools.partial(runPcanGui, refreshRate=args.refresh_rate))


if __name__ =='__main__':
    main()
